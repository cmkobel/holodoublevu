# snakemake
# https://github.com/cmkobel/holodoublevu


print()
print("░  ░░░░  ░░░      ░░░  ░░░░░░░░░      ░░░       ░░░░      ░░░  ░░░░  ░░       ░░░  ░░░░░░░░        ░░  ░░░░  ░░  ░░░░  ░")
print("▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒")
print("▓        ▓▓  ▓▓▓▓  ▓▓  ▓▓▓▓▓▓▓▓  ▓▓▓▓  ▓▓  ▓▓▓▓  ▓▓  ▓▓▓▓  ▓▓  ▓▓▓▓  ▓▓       ▓▓▓  ▓▓▓▓▓▓▓▓      ▓▓▓▓▓  ▓▓  ▓▓▓  ▓▓▓▓  ▓")
print("█  ████  ██  ████  ██  ████████  ████  ██  ████  ██  ████  ██  ████  ██  ████  ██  ████████  ██████████    ████  ████  █")
print("█  ████  ███      ███        ███      ███       ████      ████      ███       ███        ██        █████  ██████      ██")
                                                                                                                        
print(""" 
    Generalization and parametrization 
    of the SuPAcow.
    Phase 1: Proteomics.
//""")



configfile: "config/config.yaml"

print(config)



rule all:
    input:
        # Annotate proteome
        "results/annotation/annotation.emapper.annotations",
            
        # Proteomics
        # Filter
        "results/filtered/proteome_intensities.rds",
        
        # Pathway enrichment, proteomics of genomes
        
        
        # Viz.
        # Alluvial
        
        # Impute
        [f"results/ig/{i}/imputed/proteome_intensities.rds" for i in config["imputation_group"].keys()],
        
        # WGCNA
        # compute modules
        [f"results/ig/{i}/wgcna/modules.rds" for i in config["imputation_group"].keys()],
        # Inspect modules
        [f"results/ig/{i}/wgcna/inspected/module2module.rds" for i in config["imputation_group"].keys()],
        # Pathway enrichment on modules
        
        # PE on WGCNA
        [f"results/ig/{i}/wgcna/pathway_enrichment/pathway_enrichment.rds" for i in config["imputation_group"].keys()],
        
        
        # Species contribution to modules.
        [f"results/ig/{i}/wgcna/species_table/species_table.rds" for i in config["imputation_group"].keys()],
        # Pack pdfs together for portability of results

        [f"results/ig/{i}/wgcna/inspected/module_membership_trait_significance/mm_ts_annotated_tax.rds" for i in config["imputation_group"].keys()],
        
        # TODO:
        # WGCNA holomodules, export to cytoscape for visualization.
        # Alluvial, proteomics on genomes
        # PE, proteomics on genomes
        
        
        
        
        
        
        
        
        

rule annotate_proteome:
    """ Annotate proteome. """
    input: 
        protein_database = config["principal_input_proteome_amino_acid_sequences"]
    output:
        annotations = "results/annotation/annotation.emapper.annotations",
    params:
        db = config["eggnog_database"],
    conda: "envs/eggnog.yaml"
    threads: 128
    shell: """
    
        emapper.py \
            --data_dir {params.db} \
            --output_dir "$(dirname {output.annotations})/" \
            -o annotation \
            -i {input.protein_database} \
            --cpu {threads} \
            --itype proteins \
            --override \
            --temp_dir $TMPDIR \
            --decorate_gff no \
            -m diamond
    
    
    """



    
        
# I should probably add fragpipe and start with those raw outputs and whatnot. That should actually be easy since there is a report in the end of mspipeline. But in the interest of time I'm gonna reuse the proteomics long that I should just blindly trust that is OK.


rule validate_metadata:
    input: 
        metadata = config["principal_input_sample_metadata"]
    conda: "envs/r-tidyverse.yaml"
    shell: """
    
        Rscript -e '''
            
            library(tidyverse)
            
            metadata = read_tsv("{input.metadata}")
            
            metadata %>% glimpse()
                
        '''
    """
    

rule validate_inputs:
    """ Just to check that all inputs exist etc. """
    input:
        sample_metadata = config["principal_input_sample_metadata"],
        proteome_amino_acid_sequences = config["principal_input_proteome_amino_acid_sequences"],
        proteome_intensities = config["principal_input_proteome_intensities"],
        proteome2genome_mapping = config["principal_input_proteome2genome_mapping"],
    shell: """
        head -c 1024 {input}
    """
        
    
# Now I can just "copy-paste" my scripts from the 26_proteomics_analysis into here and everything will be clean in no time. :) Now I'll drive home to my family in Copenhagen <3


rule filter:
    """ Remove outlier samples. """
    input:
        metadata = config["principal_input_sample_metadata"],
        proteome_intensities = config["principal_input_proteome_intensities"],
    output:
        filtered = "results/filtered/proteome_intensities.rds",
    conda: "envs/r-tidyverse.yaml"
    script: "scripts/filter.R"

    

    
# rule impute
rule impute:
    """ Impute missing values. """
    input:
        metadata = config["principal_input_sample_metadata"],
        filtered = "results/filtered/proteome_intensities.rds",
    output:
        imputed = "results/ig/{imputation_group}/imputed/proteome_intensities.rds",
        groups = "results/ig/{imputation_group}/imputed/groups.tsv" # This is a specific table per 
    params:
        imputation_group = lambda wildcards: wildcards.imputation_group,
        samples = lambda wildcards: config["imputation_group"][wildcards.imputation_group]
    conda: "envs/r-missranger.yaml"
    script: "scripts/impute.R"


# rule WGCNA_modules
rule wgcna_modules:
    """ Call WGCNA modules. """
    input:
        metadata = config["principal_input_sample_metadata"],
        imputed = "results/ig/{imputation_group}/imputed/proteome_intensities.rds",
        groups = "results/ig/{imputation_group}/imputed/groups.tsv",
    output:
        wgcna_modules = "results/ig/{imputation_group}/wgcna/modules.rds"
    params:
        imputation_group = lambda wildcards: wildcards.imputation_group,
        samples = lambda wildcards: config["imputation_group"][wildcards.imputation_group]
    conda: "envs/r-wgcna.yaml"
    script: "scripts/wgcna_modules.R"



rule inspect_wgcna:
    """ Inspect the modules. """
    input:
        metadata = config["principal_input_sample_metadata"],
        wgcna_modules = "results/ig/{imputation_group}/wgcna/modules.rds",
        groups = "results/ig/{imputation_group}/imputed/groups.tsv",
    output: 
        mod2mod = "results/ig/{imputation_group}/wgcna/inspected/module2module.rds", #axis_pairs
        module_membership_trait_significance = "results/ig/{imputation_group}/wgcna/inspected/module_membership_trait_significance/module_membership_trait_significance.rds",
        trait_modules_of_interest = "results/{imputation_group}/both/wgcna/inspected/module_membership_trait_significance/trait_modules_of_interest.tsv"
    params:
        imputation_group = lambda wildcards: wildcards.imputation_group,
    conda: "envs/r-wgcna.yaml"
    script: "scripts/inspect_wgcna.R"
    
    


rule wgcna_pathway_enrichment: # Makes it possible to interpret biology
    input:
        metadata = config["principal_input_sample_metadata"],
        groups = "results/ig/{imputation_group}/imputed/groups.tsv",
        annotations = "results/annotation/annotation.emapper.annotations",
        wgcna_modules = "results/ig/{imputation_group}/wgcna/modules.rds",
        kegg_data = config["kegg_data"],
        trait_modules_of_interest = "results/{imputation_group}/both/wgcna/inspected/module_membership_trait_significance/trait_modules_of_interest.tsv"
    output:
        pathway_enrichment = "results/ig/{imputation_group}/wgcna/pathway_enrichment/pathway_enrichment.rds",
        annotations_clean = "results/ig/{imputation_group}/wgcna/pathway_enrichment/annotations_clean.rds", # This is just a clean version of the annotations input. If I had time to generalize this workflow, I would make this the input..
    conda: "envs/r-clusterprofiler.yaml"
    script: "scripts/wgcna_pathway_enrichment.R"



# rule wgcna_species: # Species per module. Crucial for interpreting modules.
rule wgcna_species:
    input:
        metadata = config["principal_input_sample_metadata"],
        groups = "results/ig/{imputation_group}/imputed/groups.tsv",
        #annotations = "results/annotation/annotation.emapper.annotations",
        wgcna_modules = "results/ig/{imputation_group}/wgcna/modules.rds",
        proteome2genome = config["principal_input_proteome2genome_mapping"],
        trait_modules_of_interest = "results/{imputation_group}/both/wgcna/inspected/module_membership_trait_significance/trait_modules_of_interest.tsv"
    output:
        species_table = "results/ig/{imputation_group}/wgcna/species_table/species_table.rds",
    conda: "envs/r-clusterprofiler.yaml"
    script: "scripts/wgcna_species.R"


# module_membership and trait_significance:
# Adding species table and annotation quickly in place:
rule mm_ts:
    input:
        metadata = config["principal_input_sample_metadata"],
        groups = "results/ig/{imputation_group}/imputed/groups.tsv",
        module_membership_trait_significance = "results/ig/{imputation_group}/wgcna/inspected/module_membership_trait_significance/module_membership_trait_significance.rds",
        #species_table = "results/ig/{imputation_group}/wgcna/species_table/species_table.rds",
        proteome2genome = config["principal_input_proteome2genome_mapping"], # Instead of species_table
        annotations_clean = "results/ig/{imputation_group}/wgcna/pathway_enrichment/annotations_clean.rds"
    output: 
        mm_ts = "results/ig/{imputation_group}/wgcna/inspected/module_membership_trait_significance/mm_ts_annotated_tax.rds"
    conda: "envs/r-tidyverse.yaml"
    shell: """
    
        Rscript -e '''
            
            library(tidyverse)
            source("workflow/scripts/utils.R")
            
            metadata = read_tsv("{input.metadata}")
            groups = read_tsv("{input.groups}")
            proteome2genome = read_rds("{input.proteome2genome}")
            annotations = read_rds("{input.annotations_clean}")
            module_membership_trait_significance = read_rds("{input.module_membership_trait_significance}")
            
            
            # metadata %>% handful()
            # groups %>% handful()
            proteome2genome %>% handful()
            #annotations %>% handful()
            module_membership_trait_significance %>% handful()
            
            final = module_membership_trait_significance %>%
                left_join(annotations, by = "protein") %>%
                
                left_join(proteome2genome, by = "protein") %>%
                
                identity()
                
            final %>%
                write_rds_and_tsv("{output.mm_ts}")
            
        '''
    """
    


# So far I have the modules. I can correlate these to phenotypes and across the rumen-wall-liver axis.
# I know the enriched for pathways of these modules
# And I know the species that make up each module.




# TODO
# - priority:
#    - highlight top proteins in each module. (inspect_wgcna): gene sig. & module membership.
#    - alternative species viz with distance ordering.
#    - alternative pathway viz with distance ordering.
# - report fraction of proteins with mapped annotation
# - report fraction of proteins with mapped tax id
# - report quality of imputation? stats?
# rule proteome_genomic_pathway_enrichment: # Good to understand Velmas results with.
# rule wgcna_holomodules: # for network visualization
# rule visualize_alluvial: # We already have this, so not super important.

rule pdf:
    shell: """
        echo "refresh pdf pack"
    """

pack_pdf = """
    test -f holodoublevu_pdfs.zip && rm holodoublevu_pdfs.zip
    find results -name "*.pdf" > files_to_zip
    #find results -name "*.tsv" >> files_to_zip
    cat files_to_zip | zip -q holodoublevu_pdfs.zip -@
    rm files_to_zip
    
    head -n 1 results/ig/both/wgcna/inspected/module_membership_trait_significance/mm_ts_annotated_tax.tsv > vsplit.tsv
    grep "vsplit" results/ig/both/wgcna/inspected/module_membership_trait_significance/mm_ts_annotated_tax.tsv >> vsplit.tsv
    
    echo "pdfs are ready"
"""

onsuccess:
    shell(pack_pdf)
    
onerror: 
    shell(pack_pdf)